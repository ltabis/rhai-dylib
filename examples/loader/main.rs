#[cfg(not(target_os = "linux"))]
#[cfg(not(target_os = "macos"))]
#[cfg(not(target_os = "windows"))]
compile_error!("unsupported platform - only Linux, macOS and Windows are supported");

fn main() {
    let engine = build_engine();

    engine
        .run(
            r#"
print_stuff();
debug(triple_add(1, 2, 3));
debug(get_property(#{ property: "value" }));

let object = new_plugin_object("stuff to display");
object.display_inner();
"#,
        )
        .expect("failed to execute script");
}

use rhai_dylib::loader::{libloading::Libloading, Loader};
use rhai_dylib::rhai::{config::hashing::set_ahash_seed, Engine, ImmutableString};

pub fn build_engine() -> Engine {
    if let Err(value) = set_ahash_seed(Some([1, 2, 3, 4])) {
        panic!("ahash seed has been overridden by a plugin: {value:?}");
    }

    // Inspect the type id generated by the binary.
    println!("engine: {:?}", std::any::TypeId::of::<ImmutableString>());

    let mut loader = Libloading::new();
    let mut engine = rhai_dylib::rhai::Engine::new();

    // Load the plugin.
    #[cfg(target_os = "linux")]
    engine.register_global_module(
        loader
            .load(std::path::PathBuf::from_iter([
                env!("CARGO_MANIFEST_DIR"),
                "target",
                "debug",
                "examples",
                "libdynamic_library.so",
            ]))
            .expect("failed to load plugin"),
    );
    #[cfg(target_os = "macos")]
    engine.register_global_module(
        loader
            .load(std::path::PathBuf::from_iter([
                env!("CARGO_MANIFEST_DIR"),
                "target",
                "debug",
                "examples",
                "libdynamic_library.dylib",
            ]))
            .expect("failed to load plugin"),
    );
    #[cfg(target_os = "windows")]
    engine.register_global_module(
        loader
            .load(std::path::PathBuf::from_iter([
                env!("CARGO_MANIFEST_DIR"),
                "target",
                "debug",
                "examples",
                "libdynamic_library.dll",
            ]))
            .expect("failed to load plugin"),
    );

    engine
}
